/*
    <div className="search-record">

      <div className="search-query">
        
        <div className={`search-query__form ${(formToggle || anonymous)?'':'hidden'}`}>
          <div className="search-query__search-terms">
            <input 
              value={searchTerms}
              onChange={(e) => handleInputSearchTerms(e)}
              placeholder="Search..."/>
          </div>
          <div className="search-query__username">
            <input 
              value={username}
              onChange={(e) => handleInputUsername(e)}
              placeholder="@username"/>
          </div>
          <div className="search-query__tags">
            <input 
              value={tags}
              onChange={(e) => handleInputTags(e)}
              placeholder="#tags"/>
          </div>
          {
            subscriptionToggle
            ?<div className="search-query__make-subscription">

              <button
                onClick={(e) => handleSubscribe(e)}
                className="search-query__subscribe"></button>
              <input 
                value={subscriptionName}
                onChange={(e) => handleInputSubscriptionName(e)}
                placeholder="name for new subscription"
                className="search-query__subscription-name"/>
            </div>
            :null
          }
          <div className="search-query__control">
            <button
              onClick={(e) => handleClear(e)}
              className="search-query__clear"></button>
            { 
              (!anonymous)
              ?<button
                onClick={(e) => handleSubscriptionTogle(e)}
                className="search-query__subscription-toggle"></button>:null
            }
          </div>
        </div>
        {
          anonymous
          ?null
          :<div className={`search-query__subscriptions-list-contaner ${(formToggle || anonymous)?'hidden':''}`}>
            {subscriptionsList}
          </div>
        }
        {
          anonymous
          ?null
          :<button
            onClick={(e) => handleFormTogle(e)}
            className={`search-query__toggle ${formToggle?'subscriptions':'search'}`}></button>
        }
      </div>
      <div className="search-record__record-list">
        { recordsList }
      </div>
    </div>*/

@font-face {
    font-family: flaticon;
    src: url('/static/flaticon.woff2');
}

.search-record {
  background-color: var(--fourth-color);
}

.search-query__form {
  display: flex;
  flex-direction: column;
  padding: 1em 0;
}



.search-query__form::before {
  display: block;
  content: 'Search by username or tags';
  padding: 1em 0 0.25em 1rem;
  color: var(--first-color);
  font-size: 1.5rem;
  font-weight: bold;
}


.search-query__toggle {
  position: fixed;
  bottom: 10vw;
  right: 5vw;
  background-color: var(--main-color);
  border-style: none;
  border-radius: 2em;
  font-size: 1.5rem;
  width: 2em;
  height: 2em;
  display: flex;
  justify-content: center;
  align-items: center;
  color: var(--fourth-color);
  outline: none;
}

.search-query__toggle.search::before {
  font-family: flaticon;
  content: '\e0c3';
}

.search-query__toggle.subscriptions::before {
  font-family: flaticon;
  content: '\e038';
}


.search-query__search-terms,
.search-query__username,
.search-query__tags {
  align-self: stretch;
  margin: 0.5em 0.5em;
}

.search-query__search-terms > *,
.search-query__username > *,
.search-query__tags > *{
  width: 100%;
  font-size: 1.35rem;
  padding: 0.25em;
  border-style: none;
  color: var(--main-color);
  outline: none;
  background-color: transparent;
}

.search-query__control{
  position: fixed;
  bottom: 10vw;
  left: 5vw;
  display: flex;
  z-index: 10;
}

.search-query__control > * {
  background-color: var(--main-color);
  border-style: none;
  border-radius: 2em;
  font-size: 1.5rem;
  /*width: 2em;*/
  height: 2em;
  display: flex;
  justify-content: center;
  align-items: center;
  color: var(--fourth-color);
  outline: none;
  margin-right: 0.25em;
}

.search-query__clear {
  width: 2em;
}
.search-query__subscription-toggle {
  padding: 0 0.5em; 
}

.search-query__clear::before {
  font-family: flaticon;
  content: '\e0fd';
}

.search-query__subscription-toggle::before {
  font-family: flaticon;
  content: '\e0ef';
}
.search-query__subscription-toggle::after {
  content: 'Subscribe';
  margin-left: 0.5em;
}

.search-query__make-subscription {
  display: flex;
  align-self: stretch;
  margin: 0.5em;
  font-size: 1.35rem;
}

.search-query__subscription-name{
  flex-grow: 1;
  font-size: 1.35rem;
  order: 1;
  border-style: none;
  color: var(--main-color);
  outline: none;
  background-color: transparent;
}

.search-query__subscribe{
  font-size: 1.35rem;
  order: 2;
  border-style: none;
  background-color: transparent;
  margin-left: 0.5em;
}

.search-query__subscribe::before{
  font-family: flaticon;
  content: '\e053';
  color: var(--first-color);
  font-size: 1.5em;
}

.search-query__subscribe::after{
  content: 'add';
  color: var(--first-color);
  font-size: 1.5em;
  font-weight: bold;
}



.search-query__subscriptions-list-contaner.hidden,
.search-query__form.hidden {
  display: none;
}


/*

.search-record__record-list::before {
  display: block;
  content: 'Results';
  padding: 1em 0 0.25em 1rem;
  color: var(--first-color);
  font-size: 1.5rem;
  font-weight: bold;
}*/



@media (min-width: 800px) {

  .search-query {

    display: grid;
    grid-template-columns: 4fr 5fr;
    padding: 2em 1em;
  }

  .search-query__form {
    align-self: stretch;
    display: flex;
    flex-direction: column;
    /*flex-grow: 1;*/
  }

  .search-query__form > * {
  }


  .search-query__form > * > input {
    width: initial;
    outline: none;
  }

  .search-query__toggle {
    display: none;
  }

  .search-query__subscriptions-list-contaner,
  .search-query__form {
    order: 2;
  }

  .search-query__control {
    position: static;
    margin: 1em;
    order: 4;
  }
  .search-query__make-subscription {
    order: 3;
  }


  .search-query__subscriptions-list-contaner.hidden,
  .search-query__form.hidden {
    display: initial;
  }


  .search-query__clear,
  .search-query__subscription-toggle {
    background-color: transparent;
    border-style: none;
    color: var(--first-color);
  }

}


@media (min-width: 1250px) {

  .search-record {
    display: grid;
    grid-template-columns: 3fr 5fr;
    grid-template-areas: "query list list list";

  }

  .search-record__record-list {
    grid-area: list;

  }

  .search-query {
    padding: 2em 1em;
    display: flex;
    flex-direction: column;
    grid-area: query;
  }

/*

  .search-record__record-list::before {
    display: block;
    content: 'Results';
    padding: 3em 0 1.5em 1rem;
    color: var(--first-color);
    font-size: 1.5rem;
    font-weight: bold;
  }
*/

}

/*
            <div className="search-query__make-subscription">

                <button
                  onClick={(e) => handleSubscribe(e)}
                  className="search-query__subscribe">SUB</button>
                <input 
                  value={subscriptionName}
                  onChange={(e) => handleInputSubscriptionName(e)}
                  placeholder="name for new subscription"
                  className="search-query__subscription-name"/>
              </div>*/



/*    <div className="search-query__form">
            <div className="search-query__username">
              <input 
                value={username}
                onChange={(e) => handleInputUsername(e)}
                placeholder="@username"/>
            </div>
            <div className="search-query__tags">
              <input 
                value={tags}
                onChange={(e) => handleInputTags(e)}
                placeholder="#tags"/>
            </div>
            <div className="search-query__control">
              <button
                onClick={(e) => handleClear(e)}
                className="search-query__clear">X</button>
              <button
                onClick={(e) => handleSubscriptionTogle(e)}
                className="search-query__subscription-toggle">make sub</button>
            </div>
            {
              subscriptionToggle
              ?<div className="search-query__make-subscription">

                <button
                  onClick={(e) => handleSubscribe(e)}
                  className="search-query__subscribe">SUB</button>
                <input 
                  value={subscriptionName}
                  onChange={(e) => handleInputSubscriptionName(e)}
                  placeholder="name for new subscription"
                  className="search-query__subscription-name"/>
              </div>
              :null
            }
          </div>*/